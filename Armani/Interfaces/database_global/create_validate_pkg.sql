CREATE OR REPLACE PACKAGE VALIDATE_INTERFACES IS
    FUNCTION VALIDATE(INTERFACE_NAME VARCHAR, FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER)
        RETURN INTEGER;
    FUNCTION VALIDATE_EMPLOYEE (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER)
        RETURN INTEGER;
    FUNCTION VALIDATE_STORE (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER)
        RETURN INTEGER;
    FUNCTION VALIDATE_REGISTER (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER)
        RETURN INTEGER;
    FUNCTION VALIDATE_CURRENCYRATE (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER)
        RETURN INTEGER;
    FUNCTION VALIDATE_PROMOTION (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER)
        RETURN INTEGER;
END VALIDATE_INTERFACES;
/
CREATE OR REPLACE PACKAGE BODY VALIDATE_INTERFACES IS
FUNCTION VALIDATE (INTERFACE_NAME VARCHAR, FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER) RETURN INTEGER
IS
    RETURN_CODE INTEGER := 0;
BEGIN
    CASE
    WHEN (INTERFACE_NAME IN ('EMPLOYEE')) THEN
        RETURN_CODE := VALIDATE_EMPLOYEE(FAILEDRECORD, PROCESSEDRECORD);
    WHEN (INTERFACE_NAME IN ('STORE')) THEN
        RETURN_CODE := VALIDATE_STORE(FAILEDRECORD, PROCESSEDRECORD);
    WHEN (INTERFACE_NAME IN ('PROMOTION')) THEN
        RETURN_CODE := VALIDATE_PROMOTION(FAILEDRECORD, PROCESSEDRECORD);
    WHEN (INTERFACE_NAME IN ('CURRENCYRT')) THEN
        RETURN_CODE := VALIDATE_CURRENCYRATE(FAILEDRECORD, PROCESSEDRECORD);
    WHEN (INTERFACE_NAME IN ('REGISTER')) THEN
        RETURN_CODE := VALIDATE_REGISTER(FAILEDRECORD, PROCESSEDRECORD);
    END CASE;
    return RETURN_CODE;
END VALIDATE;

FUNCTION VALIDATE_EMPLOYEE (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER) RETURN INTEGER
IS
BEGIN
    SELECT COUNT(*) INTO FAILEDRECORD FROM ARM_STG_EMPLOYEE WHERE ID NOT IN (SELECT ARM_EXTERNAL_ID FROM PA_EM);
    SELECT COUNT(*) INTO PROCESSEDRECORD FROM ARM_STG_EMPLOYEE WHERE ID IN (SELECT ARM_EXTERNAL_ID FROM PA_EM);
    IF (FAILEDRECORD > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END VALIDATE_EMPLOYEE;

FUNCTION VALIDATE_STORE (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER) RETURN INTEGER
IS
BEGIN
    SELECT COUNT(*) INTO FAILEDRECORD FROM ARM_STG_STORE WHERE COMPANY_CODE||SHOP_CODE NOT IN (SELECT ID_STR_RT FROM PA_STR_RTL);
    SELECT COUNT(*) INTO PROCESSEDRECORD FROM ARM_STG_STORE WHERE COMPANY_CODE||SHOP_CODE IN (SELECT ID_STR_RT FROM PA_STR_RTL);
    IF (FAILEDRECORD > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END VALIDATE_STORE;

FUNCTION VALIDATE_REGISTER (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER) RETURN INTEGER
IS
BEGIN
    SELECT COUNT(*) INTO FAILEDRECORD FROM ARM_STG_REGISTER WHERE (REGISTER_ID,COMPANY_CD||STORE_ID) NOT IN (SELECT ID_RPSTY_TND,ID_STR_RT FROM AS_TL);
    SELECT COUNT(*) INTO PROCESSEDRECORD FROM ARM_STG_REGISTER WHERE (REGISTER_ID,COMPANY_CD||STORE_ID) IN (SELECT  ID_RPSTY_TND,ID_STR_RT FROM AS_TL);
    IF (FAILEDRECORD > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END VALIDATE_REGISTER;

FUNCTION VALIDATE_CURRENCYRATE (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER) RETURN INTEGER
IS
BEGIN
    SELECT COUNT(*) INTO FAILEDRECORD FROM ARM_STG_CURRENCY_RT WHERE (FROM_CURRENCY,TO_CURRENCY) NOT IN (SELECT ID_CNY_FROM, ID_CNY_TO FROM ARM_CURRENCY_RATE);
    SELECT COUNT(*) INTO PROCESSEDRECORD FROM ARM_STG_CURRENCY_RT WHERE (FROM_CURRENCY,TO_CURRENCY) IN (SELECT  ID_CNY_FROM, ID_CNY_TO FROM ARM_CURRENCY_RATE);
    IF (FAILEDRECORD > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;

END VALIDATE_CURRENCYRATE;

FUNCTION VALIDATE_PROMOTION (FAILEDRECORD OUT NUMBER, PROCESSEDRECORD OUT NUMBER) RETURN INTEGER
IS
    NOOFRECORDS NUMBER := 0;
BEGIN
    SELECT COUNT(*) INTO FAILEDRECORD FROM ARM_STG_PRM WHERE (PROMOTION_NUM,STORE_ID) NOT IN (SELECT ID_PRM, ID_STR_RT FROM CO_PRM);
    SELECT COUNT(*) INTO PROCESSEDRECORD FROM ARM_STG_PRM WHERE (PROMOTION_NUM,STORE_ID) IN (SELECT  ID_PRM, ID_STR_RT FROM CO_PRM);
    IF (FAILEDRECORD > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END VALIDATE_PROMOTION;
END VALIDATE_INTERFACES;
/

