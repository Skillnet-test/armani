CREATE OR REPLACE PACKAGE ARM_LOAD_ITEM_PKG AS
	TYPE TRAN_TYPE_TYPE IS TABLE OF ARM_STG_ITEM.TRAN_TYPE%TYPE;
	TYPE START_DATE_TYPE IS TABLE OF ARM_STG_ITEM.START_DATE%TYPE;
	TYPE START_TIME_TYPE IS TABLE OF ARM_STG_ITEM.START_TIME%TYPE;
	TYPE END_DATE_TYPE IS TABLE OF ARM_STG_ITEM.END_DATE%TYPE;
	TYPE END_TIME_TYPE IS TABLE OF ARM_STG_ITEM.END_TIME%TYPE;
	TYPE STORE_ID_TYPE IS TABLE OF ARM_STG_ITEM.STORE_ID%TYPE;
	TYPE ITEM_TYPE IS TABLE OF ARM_STG_ITEM.ITEM%TYPE;
	TYPE REF_ITEM_TYPE IS TABLE OF ARM_STG_ITEM.REF_ITEM%TYPE;
	TYPE BARCODE_TYPE IS TABLE OF ARM_STG_ITEM.BARCODE%TYPE;
	TYPE DEPT_TYPE IS TABLE OF ARM_STG_ITEM.DEPT%TYPE;
	TYPE CLASS_TYPE IS TABLE OF ARM_STG_ITEM.CLASS%TYPE;
	TYPE SUB_CLASS_TYPE IS TABLE OF ARM_STG_ITEM.SUB_CLASS%TYPE;
	TYPE NEW_PRICE_TYPE IS TABLE OF ARM_STG_ITEM.NEW_PRICE%TYPE;
	TYPE OLD_PRICE_TYPE IS TABLE OF ARM_STG_ITEM.OLD_PRICE%TYPE;
	TYPE CURRENCY_TYPE IS TABLE OF ARM_STG_ITEM.CURRENCY%TYPE;
	TYPE TAXABLE_IND_TYPE IS TABLE OF ARM_STG_ITEM.TAXABLE_IND%TYPE;
	--TYPE VAT_RATE_TYPE IS TABLE OF ARM_STG_ITEM.VAT_RATE%TYPE;
	TYPE VAT_RATE_TYPE IS TABLE OF NUMBER;
	TYPE VAT_CODE_TYPE IS TABLE OF ARM_STG_ITEM.VAT_CODE%TYPE;
	TYPE YEAR_TYPE IS TABLE OF ARM_STG_ITEM.YEAR%TYPE;
	TYPE SEASON_TYPE IS TABLE OF ARM_STG_ITEM.SEASON%TYPE;
	TYPE BRAND_TYPE IS TABLE OF ARM_STG_ITEM.BRAND%TYPE;
	TYPE LABEL_TYPE IS TABLE OF ARM_STG_ITEM.LABEL%TYPE;
	TYPE SUBLINE_TYPE IS TABLE OF ARM_STG_ITEM.SUBLINE%TYPE;
	TYPE GENDER_TYPE IS TABLE OF ARM_STG_ITEM.GENDER%TYPE;
	TYPE CATEGORY_TYPE IS TABLE OF ARM_STG_ITEM.CATEGORY%TYPE;
	TYPE ITEM_DROP_TYPE IS TABLE OF ARM_STG_ITEM.ITEM_DROP%TYPE;
	TYPE VARIANT_TYPE IS TABLE OF ARM_STG_ITEM.VARIANT%TYPE;
	TYPE SIZE_ID_TYPE IS TABLE OF ARM_STG_ITEM.SIZE_ID%TYPE;
	TYPE SIZE_INDEX_TYPE IS TABLE OF ARM_STG_ITEM.SIZE_INDEX%TYPE;
	TYPE SIZE_INDEX_1_TYPE IS TABLE OF ARM_STG_ITEM.SIZE_INDEX_1%TYPE;
	TYPE SUPPLIER_TYPE IS TABLE OF ARM_STG_ITEM.SUPPLIER%TYPE;
	TYPE MODEL_TYPE IS TABLE OF ARM_STG_ITEM.MODEL%TYPE;
	TYPE FABRIC_TYPE IS TABLE OF ARM_STG_ITEM.FABRIC%TYPE;
	TYPE COLOR_TYPE IS TABLE OF ARM_STG_ITEM.COLOR%TYPE;
	TYPE PRODUCT_TYPE IS TABLE OF ARM_STG_ITEM.PRODUCT%TYPE;
	TYPE STYLE_NUM_TYPE IS TABLE OF ARM_STG_ITEM.STYLE_NUM%TYPE;
	TYPE PROMOTION_NUM_TYPE IS TABLE OF ARM_STG_ITEM.PROMOTION_NUM%TYPE;
	TYPE MANUAL_PRICE_ENTRY_TYPE IS TABLE OF ARM_STG_ITEM.MANUAL_PRICE_ENTRY%TYPE;
	TYPE STATUS_TYPE IS TABLE OF ARM_STG_ITEM.STATUS%TYPE;
	TYPE STG_EVENT_ID_TYPE IS TABLE OF ARM_STG_CURRENCY_RT.STG_EVENT_ID%TYPE;
	TYPE DESCRIPTION_TYPE IS TABLE OF ARM_STG_ITEM.DESCRIPTION%TYPE;
	TYPE COUNTRY_CD_TYPE IS TABLE OF PA_PRTY.ED_CO%TYPE;
	TYPE LANGUAGE_CD_TYPE IS TABLE OF PA_PRTY.ED_LA%TYPE;
	TYPE ITEM_REC_TYPE IS RECORD (
	TRAN_TYPE TRAN_TYPE_TYPE
		, START_DATE START_DATE_TYPE
		, START_TIME START_TIME_TYPE
		, END_DATE END_DATE_TYPE
		, END_TIME END_TIME_TYPE
		, STORE_ID STORE_ID_TYPE
		, ITEM ITEM_TYPE
		, REF_ITEM REF_ITEM_TYPE
		, BARCODE BARCODE_TYPE
		, DEPT DEPT_TYPE
		, CLASS CLASS_TYPE
		, SUB_CLASS SUB_CLASS_TYPE
		, NEW_PRICE NEW_PRICE_TYPE
		, OLD_PRICE OLD_PRICE_TYPE
		, CURRENCY CURRENCY_TYPE
		, TAXABLE_IND TAXABLE_IND_TYPE
		, VAT_RATE VAT_RATE_TYPE
		, VAT_CODE VAT_CODE_TYPE
		, YEAR YEAR_TYPE
		, SEASON SEASON_TYPE
		, BRAND BRAND_TYPE
		, LABEL LABEL_TYPE
		, SUBLINE SUBLINE_TYPE
		, GENDER GENDER_TYPE
		, CATEGORY CATEGORY_TYPE
		, ITEM_DROP ITEM_DROP_TYPE
		, VARIANT VARIANT_TYPE
		, SIZE_ID SIZE_ID_TYPE
		, SIZE_INDEX SIZE_INDEX_TYPE
		, SIZE_INDEX_1 SIZE_INDEX_1_TYPE
		, SUPPLIER SUPPLIER_TYPE
		, MODEL MODEL_TYPE
		, FABRIC FABRIC_TYPE
		, COLOR COLOR_TYPE
		, PRODUCT PRODUCT_TYPE
		, STYLE_NUM STYLE_NUM_TYPE
		, PROMOTION_NUM PROMOTION_NUM_TYPE
		, MANUAL_PRICE_ENTRY MANUAL_PRICE_ENTRY_TYPE
		, STATUS STATUS_TYPE
		, STG_EVENT_ID STG_EVENT_ID_TYPE
		, DESCRIPTION DESCRIPTION_TYPE
	);

	CURSOR L_ITEM_CUR(IN_FILE_NAME VARCHAR2, IN_TRAN_TYPE VARCHAR2) IS
	SELECT   ASI.TRAN_TYPE
					, ASI.START_DATE
					, ASI.START_TIME
					, ASI.END_DATE
					, ASI.END_TIME
					, ASI.STORE_ID
					, ASI.ITEM
					, ASI.REF_ITEM
					, ASI.BARCODE
					, ASI.DEPT
					, ASI.CLASS
					, ASI.SUB_CLASS
					, ASI.NEW_PRICE
					, ASI.OLD_PRICE
					, ASI.CURRENCY
					, ASI.TAXABLE_IND
					, ASI.VAT_RATE
					, ASI.VAT_CODE
					, ASI.YEAR
					, ASI.SEASON
					, ASI.BRAND
					, ASI.LABEL
					, ASI.SUBLINE
					, ASI.GENDER
					, ASI.CATEGORY
					, ASI.ITEM_DROP
					, ASI.VARIANT
					, ASI.SIZE_ID
					, ASI.SIZE_INDEX
					, ASI.SIZE_INDEX_1
					, ASI.SUPPLIER
					, ASI.MODEL
					, ASI.FABRIC
					, ASI.COLOR
					, ASI.PRODUCT
					, ASI.STYLE_NUM
					, ASI.PROMOTION_NUM
					, ASI.MANUAL_PRICE_ENTRY
					, ASI.STG_EVENT_ID
					, ASI.DESCRIPTION
					, ASI.STATUS
	FROM     ARM_STG_ITEM ASI
	WHERE  ((NVL(ASI.STG_STATUS, 0) = 0 AND STG_PROCESS_DATE IS NULL) OR
	(STG_STATUS=2 AND STG_PROCESS_DATE IS NOT NULL))
	AND    ASI.TRAN_TYPE = IN_TRAN_TYPE
	AND ASI.FILE_IDENTIFIER = IN_FILE_NAME;

	ERRORS NUMBER;
	DML_ERRORS EXCEPTION;
	LOCK_ERRORS EXCEPTION;
	PRAGMA EXCEPTION_INIT(DML_ERRORS, -24381);
	PRAGMA EXCEPTION_INIT(LOCK_ERRORS, -00054);
	-- FOLLOWING PROCEDURE LOADS ITEMS.
	FUNCTION LOAD_ITEM(IN_INTERFACE_KEY IN VARCHAR2
										, IN_START_TIME 	 IN VARCHAR2
										, IN_FILE_NAME 	 IN  VARCHAR2)
	RETURN INTEGER;

	PROCEDURE PROCESS_TRAN(L_TRAN_TYPE IN VARCHAR2, L_TOTAL_RECORDS_PROCESSED
						OUT NUMBER, L_FILE_NAME IN VARCHAR2, RETURN_CODE OUT VARCHAR2);

	PROCEDURE PRE_PROCESS_TRAN(IN_FILE_NAME IN  VARCHAR2, IN_TRAN_TYPE IN VARCHAR2, RETURN_CODE OUT PLS_INTEGER );

	PROCEDURE PURGE_PROCESSED_DATA;

	FUNCTION PROCESS_TRAN_0
	(
		ITEM_REC ITEM_REC_TYPE
	) RETURN INTEGER;
	FUNCTION PROCESS_TRAN_1
	(
		ITEM_REC ITEM_REC_TYPE
	) RETURN INTEGER;

	FUNCTION PROCESS_TRAN_2
	(
		ITEM_REC ITEM_REC_TYPE
	) RETURN INTEGER;
	FUNCTION PROCESS_TRAN_3_4_5
	(
		ITEM_REC ITEM_REC_TYPE
	) RETURN INTEGER;

	FUNCTION PROCESS_TRAN_6_7_9
	(
		ITEM_REC ITEM_REC_TYPE,
		TRAN_TYPE VARCHAR2
	) RETURN INTEGER;
	FUNCTION PROCESS_TRAN_8
	(
		ITEM_REC ITEM_REC_TYPE
	) RETURN INTEGER;
	FUNCTION process_tran_10
	(
		item_rec item_rec_type
	) RETURN INTEGER;
	FUNCTION process_tran_11
	(
		item_rec item_rec_type
	) RETURN INTEGER;

END ARM_LOAD_ITEM_PKG;
/
CREATE OR REPLACE PACKAGE BODY ARM_LOAD_ITEM_PKG AS

	FUNCTION LOAD_ITEM(IN_INTERFACE_KEY IN VARCHAR2
					, IN_START_TIME 	 IN VARCHAR2
					, IN_FILE_NAME 	 IN  VARCHAR2)
	RETURN INTEGER
	IS
		RETURN_CODE   			 PLS_INTEGER := 0;
		STATUS					 VARCHAR2(1)	 := '0';
		L_PROCESSED_RECORDS		 NUMBER		 := 0;
		TOTAL_PROCESSED_RECORDS	 NUMBER		 := 0;
		TYPE T_TRAN_TYPE_LIST IS VARRAY(10) OF NUMBER;
		tran_list T_Tran_Type_List := T_Tran_Type_List(0,1,2,3,4,5,6,7,8,9,10,11);
	BEGIN
		FOR I IN 1.. TRAN_LIST.COUNT LOOP
		IF (TRAN_LIST(I) = 0) THEN
			PRE_PROCESS_TRAN(IN_FILE_NAME, TRAN_LIST(I), RETURN_CODE);
		END IF;
		COMMIT;
		IF (RETURN_CODE <> 2) THEN
			PROCESS_TRAN(TRAN_LIST(I), L_PROCESSED_RECORDS, IN_FILE_NAME, RETURN_CODE);
		END IF;
		TOTAL_PROCESSED_RECORDS := TOTAL_PROCESSED_RECORDS + L_PROCESSED_RECORDS;
		L_PROCESSED_RECORDS := 0;
		COMMIT;
		END LOOP;
		BEGIN
			CASE RETURN_CODE
				WHEN 1  THEN STATUS := '1';
				WHEN 2 THEN STATUS := '2';
				ELSE STATUS :='0';
			END CASE;
			INSERT INTO ARM_PROCESS_LOG
			(
					 INTERFACE_KEY
				 , START_TIME
				 , END_TIME
				 , STATUS
				 , RECORD_NUM
				 , FILE_NAME
			)
			VALUES
			(
					 IN_INTERFACE_KEY
				 , TO_DATE(IN_START_TIME, 'YYYYMMDDHH24:MI:SS')
				 , SYSDATE
				 , STATUS
				 , NVL(TOTAL_PROCESSED_RECORDS,0)
				 , IN_FILE_NAME
			);
		END;
		RETURN STATUS;
	END LOAD_ITEM;
	PROCEDURE PRE_PROCESS_TRAN(IN_FILE_NAME IN  VARCHAR2, IN_TRAN_TYPE IN VARCHAR2, RETURN_CODE OUT PLS_INTEGER )
	IS
	ITEM_REC 			 ITEM_REC_TYPE;
	L_CNT 				 PLS_INTEGER := 0;
	ERROR_CODE 	  VARCHAR2(10) := NULL;
	ERROR_INDEX   PLS_INTEGER := 0;
	BEGIN
	RETURN_CODE := 0;
	LOCK TABLE ARM_COLOR, AS_ITM IN EXCLUSIVE MODE;
	OPEN L_ITEM_CUR(IN_FILE_NAME, IN_TRAN_TYPE);
	LOOP
		FETCH L_ITEM_CUR BULK COLLECT
		INTO  ITEM_REC.TRAN_TYPE, ITEM_REC.START_DATE,
			ITEM_REC.START_TIME, ITEM_REC.END_DATE, ITEM_REC.END_TIME,
			ITEM_REC.STORE_ID, ITEM_REC.ITEM, ITEM_REC.REF_ITEM,
			ITEM_REC.BARCODE, ITEM_REC.DEPT, ITEM_REC.CLASS,
			ITEM_REC.SUB_CLASS, ITEM_REC.NEW_PRICE,
			ITEM_REC.OLD_PRICE, ITEM_REC.CURRENCY, ITEM_REC.TAXABLE_IND,
			ITEM_REC.VAT_RATE, ITEM_REC.VAT_CODE, ITEM_REC.YEAR,
			ITEM_REC.SEASON, ITEM_REC.BRAND, ITEM_REC.LABEL,
			ITEM_REC.SUBLINE, ITEM_REC.GENDER, ITEM_REC.CATEGORY,
			ITEM_REC.ITEM_DROP, ITEM_REC.VARIANT, ITEM_REC.SIZE_ID, ITEM_REC.SIZE_INDEX,
			ITEM_REC.SIZE_INDEX_1, ITEM_REC.SUPPLIER, ITEM_REC.MODEL,
			ITEM_REC.FABRIC, ITEM_REC.COLOR,ITEM_REC.PRODUCT,
			ITEM_REC.STYLE_NUM, ITEM_REC.PROMOTION_NUM,
			ITEM_REC.MANUAL_PRICE_ENTRY, ITEM_REC.STG_EVENT_ID, ITEM_REC.DESCRIPTION,
			ITEM_REC.STATUS;
			IF (ITEM_REC.ITEM.COUNT > 0) THEN
				BEGIN
					FORALL I IN 1 .. ITEM_REC.ITEM.COUNT SAVE EXCEPTIONS
						MERGE INTO ARM_COLOR DESTINATION
						USING (SELECT   ITEM_REC.COLOR(I) COLOR
									 FROM DUAL WHERE ITEM_REC.COLOR(I) IS NOT NULL) SOURCE
						ON (DESTINATION.ID_COLOR = SOURCE.COLOR)
						WHEN MATCHED THEN
							UPDATE SET   DE_COLOR = NVL(DE_COLOR, SOURCE.COLOR)
						WHEN NOT MATCHED THEN
							INSERT (
								 ID_COLOR
							 , DE_COLOR
							)
							VALUES (
								 SOURCE.COLOR
							 , SOURCE.COLOR
							);
					EXCEPTION
						WHEN DML_ERRORS THEN
							ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
							L_CNT := L_CNT + ERRORS;
							RETURN_CODE := 1;
							FOR I IN 1..ERRORS LOOP
								ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
								ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
								IF (ERROR_CODE <> 1) THEN
									UPDATE ARM_STG_ITEM
									SET      STG_STATUS = 1
									, STG_ERROR_MESSAGE = ' ERROR MERGING ARM_COLOR - ' ||ERROR_CODE
									 , STG_PROCESS_DATE = SYSDATE
									WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
								END IF;
							END LOOP;
					END;
					BEGIN
						FORALL I IN 1 .. ITEM_REC.ITEM.COUNT SAVE EXCEPTIONS
							MERGE INTO AS_ITM DESTINATION
							USING (SELECT   ITEM_REC.ITEM(I) ITEM
															, ITEM_REC.REF_ITEM(I) PARENT_ITEM
															, ITEM_REC.BARCODE(I) BARCODE
															, ITEM_REC.DESCRIPTION(I) DESCRIPTION
															--, ITEM_REC.LONG_DESC(I) LONG_DESC
															, ITEM_REC.DEPT(I)  DEPT
															, ITEM_REC.CLASS(I)  CLASS
															, ITEM_REC.SUB_CLASS(I) SUB_CLASS
															, ITEM_REC.YEAR(I) YEAR
															, ITEM_REC.SEASON(I) SEASON
															, ITEM_REC.BRAND(I) BRAND
															, ITEM_REC.LABEL(I) LABEL
															, ITEM_REC.SUBLINE(I) SUBLINE
															, ITEM_REC.GENDER(I) GENDER
															, ITEM_REC.CATEGORY(I) CATEGORY
															, ITEM_REC.ITEM_DROP(I) ITEM_DROP
															, ITEM_REC.VARIANT(I) VARIANT
															, ITEM_REC.SIZE_ID(I) SIZE_ID
															, ITEM_REC.SIZE_INDEX(I) SIZE_INDEX
															, ITEM_REC.SIZE_INDEX_1(I) SIZE_INDEX_1
															, ITEM_REC.SUPPLIER(I) SUPPLIER
															, ITEM_REC.MODEL(I) MODEL
															, ITEM_REC.FABRIC(I) FABRIC
															, ITEM_REC.COLOR(I) COLOR
															, ITEM_REC.PRODUCT(I) PRODUCT
															, ITEM_REC.STYLE_NUM(I) STYLE_NUM
								 FROM   DUAL) SOURCE
							ON (DESTINATION.ID_ITM = SOURCE.ITEM)
							WHEN MATCHED THEN
								UPDATE SET   BARCODE = SOURCE.BARCODE
														 , NM_ITM = SOURCE.DESCRIPTION
														 , ID_DPT_POS = SOURCE.DEPT
														 , ID_CLSS = SOURCE.CLASS
														 , ID_SBCL = SOURCE.SUB_CLASS
														 , FY = SOURCE.YEAR
														 , LU_SN = SOURCE.SEASON
														 , ID_BRN = SOURCE.BRAND
														 , LABEL = SOURCE.LABEL
														 , SUBLINE = SOURCE.SUBLINE
														 , GENDER = SOURCE.GENDER
														 , CATEGORY = SOURCE.CATEGORY
														 , ITEM_DROP = SOURCE.ITEM_DROP
														 , VARIANT = SOURCE.VARIANT
														 , ID_SIZE = SOURCE.SIZE_ID
														 , SIZE_INDEX = SOURCE.SIZE_INDEX
														 , ID_KIDS_SIZE = SOURCE.SIZE_INDEX_1
														 , ID_SPR = SOURCE.SUPPLIER
														 , MODEL = SOURCE.MODEL
														 , FABRIC = SOURCE.FABRIC
														 , ID_COLOR = SOURCE.COLOR
														 , PRODUCT_NUM = SOURCE.PRODUCT
														 , STYLE_NUM = SOURCE.STYLE_NUM
							WHEN NOT MATCHED THEN
								INSERT (
									 ID_ITM
								 , ID_PRT_ITM
								 , BARCODE
								 , NM_ITM
								 , ID_DPT_POS
								 , ID_CLSS
								 , ID_SBCL
								 , FY
								 , LU_SN
								 , ID_BRN
								 , LABEL
								 , SUBLINE
								 , GENDER
								 , CATEGORY
								 , ITEM_DROP
								 , VARIANT
								 , ID_SIZE
								 , SIZE_INDEX
								 , ID_KIDS_SIZE
								 , ID_SPR
								 , MODEL
								 , FABRIC
								 , ID_COLOR
								 , PRODUCT_NUM
								 , STYLE_NUM
								)
								VALUES (
									 SOURCE.ITEM
								 , SOURCE.PARENT_ITEM
								 , SOURCE.BARCODE
								 , SOURCE.DESCRIPTION
								 , SOURCE.DEPT
								 , SOURCE.CLASS
								 , SOURCE.SUB_CLASS
								 , SOURCE.YEAR
								 , SOURCE.SEASON
								 , SOURCE.BRAND
								 , SOURCE.LABEL
								 , SOURCE.SUBLINE
								 , SOURCE.GENDER
								 , SOURCE.CATEGORY
								 , SOURCE.ITEM_DROP
								 , SOURCE.VARIANT
								 , SOURCE.SIZE_ID
								 , SOURCE.SIZE_INDEX
								 , SOURCE.SIZE_INDEX_1
								 , SOURCE.SUPPLIER
								 , SOURCE.MODEL
								 , SOURCE.FABRIC
								 , SOURCE.COLOR
								 , SOURCE.PRODUCT
								 , SOURCE.STYLE_NUM
								);
					EXCEPTION
						WHEN DML_ERRORS THEN
							ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
							L_CNT := L_CNT + ERRORS;
							RETURN_CODE := 1;
							FOR I IN 1..ERRORS LOOP
								ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
								ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
								IF (ERROR_CODE <> 1) THEN
									UPDATE ARM_STG_ITEM
									SET      STG_STATUS = 1
									, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE  || '|' || '  ERROR INSERTING
																						AS_ITM - ' || ERROR_CODE
									, STG_PROCESS_DATE = SYSDATE
									WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
								END IF;
							END LOOP;
					END;
			END IF;
			EXIT WHEN L_ITEM_CUR%NOTFOUND;
		END LOOP;
		COMMIT;
	CLOSE L_ITEM_CUR;
	EXCEPTION
		WHEN LOCK_ERRORS THEN
			RETURN_CODE := 2;
	END PRE_PROCESS_TRAN;

	PROCEDURE PURGE_PROCESSED_DATA
	IS
	BEGIN
		DELETE ARM_STG_ITEM
		WHERE STG_STATUS IN (1)
		AND STG_PROCESS_DATE IS NOT NULL;
	EXCEPTION
		WHEN DML_ERRORS THEN
			DBMS_OUTPUT.PUT_LINE('ERROR DELETING TABLE <ARM_STG_ITEM>');
	END PURGE_PROCESSED_DATA;


	PROCEDURE PROCESS_TRAN(L_TRAN_TYPE IN VARCHAR2, L_TOTAL_RECORDS_PROCESSED
	OUT NUMBER, L_FILE_NAME IN VARCHAR2, RETURN_CODE OUT VARCHAR2)
	IS
		ITEM_REC 			 ITEM_REC_TYPE;
		ERRORS 				 PLS_INTEGER;
		DML_ERRORS 			 EXCEPTION;
		L_CNT 				 PLS_INTEGER := 0;
		RET_CODE 			 PLS_INTEGER := 0;
		L_RETURN_STATUS  VARCHAR2(10);
		L_RETURN_MESSAGE VARCHAR2(255);
	BEGIN
		L_TOTAL_RECORDS_PROCESSED := 0;
		OPEN L_ITEM_CUR(L_FILE_NAME, L_TRAN_TYPE);
			LOOP
				FETCH L_ITEM_CUR BULK COLLECT
				INTO  ITEM_REC.TRAN_TYPE, ITEM_REC.START_DATE,
					ITEM_REC.START_TIME, ITEM_REC.END_DATE, ITEM_REC.END_TIME,
					ITEM_REC.STORE_ID, ITEM_REC.ITEM, ITEM_REC.REF_ITEM,
					ITEM_REC.BARCODE, ITEM_REC.DEPT, ITEM_REC.CLASS,
					ITEM_REC.SUB_CLASS, ITEM_REC.NEW_PRICE,
					ITEM_REC.OLD_PRICE, ITEM_REC.CURRENCY, ITEM_REC.TAXABLE_IND,
					ITEM_REC.VAT_RATE, ITEM_REC.VAT_CODE, ITEM_REC.YEAR,
					ITEM_REC.SEASON, ITEM_REC.BRAND, ITEM_REC.LABEL,
					ITEM_REC.SUBLINE, ITEM_REC.GENDER, ITEM_REC.CATEGORY,
					ITEM_REC.ITEM_DROP, ITEM_REC.VARIANT, ITEM_REC.SIZE_ID, ITEM_REC.SIZE_INDEX,
					ITEM_REC.SIZE_INDEX_1, ITEM_REC.SUPPLIER, ITEM_REC.MODEL,
					ITEM_REC.FABRIC, ITEM_REC.COLOR,ITEM_REC.PRODUCT,
					ITEM_REC.STYLE_NUM, ITEM_REC.PROMOTION_NUM,
					ITEM_REC.MANUAL_PRICE_ENTRY, ITEM_REC.STG_EVENT_ID, ITEM_REC.DESCRIPTION,
					ITEM_REC.STATUS
				LIMIT 1000;
				L_TOTAL_RECORDS_PROCESSED := L_TOTAL_RECORDS_PROCESSED + NVL(ITEM_REC.ITEM.COUNT,0);
				IF (ITEM_REC.ITEM.COUNT > 0) THEN
					CASE
						WHEN (L_TRAN_TYPE IN (0)) THEN
							RETURN_CODE :=	PROCESS_TRAN_0(ITEM_REC);
						WHEN (L_TRAN_TYPE IN (1)) THEN
							RET_CODE := PROCESS_TRAN_1(ITEM_REC);
						WHEN (L_TRAN_TYPE IN (2)) THEN
							RET_CODE := PROCESS_TRAN_2(ITEM_REC);
						WHEN (L_TRAN_TYPE IN (3, 4, 5)) THEN
							RET_CODE := PROCESS_TRAN_3_4_5(ITEM_REC);
						WHEN (L_TRAN_TYPE IN (6, 7, 9)) THEN
							RET_CODE := PROCESS_TRAN_6_7_9(ITEM_REC, L_TRAN_TYPE);
						WHEN (L_TRAN_TYPE IN (8)) THEN
							RET_CODE := PROCESS_TRAN_8(ITEM_REC);
					END CASE;
					IF (RET_CODE = 1) THEN
					 RETURN_CODE := 1;
					END IF;
				END IF;
				COMMIT;
				EXIT WHEN L_ITEM_CUR%NOTFOUND;
			END LOOP;
		CLOSE L_ITEM_CUR;
		COMMIT;
	END PROCESS_TRAN;

	FUNCTION PROCESS_TRAN_0(ITEM_REC ITEM_REC_TYPE)
	RETURN INTEGER
	IS
		L_CNT  		  PLS_INTEGER := 0;
		ERROR_MSG 	  VARCHAR2(1000) := NULL;
		ERROR_INDEX   PLS_INTEGER := 0;
		ERROR_CODE 	  VARCHAR2(10) := NULL;
		MSG VARCHAR2(100);
		RETURN_CODE   PLS_INTEGER := 0;
		BEGIN
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
				MERGE INTO AS_ITM_RTL_STR DESTINATION
				USING (SELECT   ITEM_REC.ITEM(I) ITEM
												, ITEM_REC.START_DATE(I) START_DATE
												, ITEM_REC.VAT_CODE(I) VAT_CODE
												, ITEM_REC.TAXABLE_IND(I) TAXABLE_IND
												, ITEM_REC.CURRENCY(I) CURRENCY
												, ARM_UTIL_PKG.CONVERT_TO_CURRENCY(ITEM_REC.NEW_PRICE(I),ITEM_REC.CURRENCY(I), '0') NEW_PRICE
												, ITEM_REC.STORE_ID(I) STORE_ID
												, ITEM_REC.DESCRIPTION(I) DESCRIPTION
				FROM   DUAL) SOURCE
				ON (DESTINATION.ID_ITM = SOURCE.ITEM AND DESTINATION.ID_STR_RT =
				SOURCE.STORE_ID)
				WHEN MATCHED THEN
					UPDATE SET   DC_PRC_EF_PRN_RT = TO_DATE(SOURCE.START_DATE,'YYYYMMDD')
					, RP_PR_SLS     = SOURCE.NEW_PRICE
					, CURRENCY_CODE = SOURCE.CURRENCY
					, LU_EXM_TX     = SOURCE.TAXABLE_IND
					, CD_VAT        = SOURCE.VAT_CODE
					, UPDATE_DT     = TO_DATE(SOURCE.START_DATE,'YYYYMMDD')
					, NM_ITM        = SOURCE.DESCRIPTION
				WHEN NOT MATCHED THEN
					INSERT (
						DC_PRC_EF_PRN_RT
						, ID_STR_RT
						, ID_ITM
						, RP_PR_SLS
						, CURRENCY_CODE
						, LU_EXM_TX
						, CD_VAT
						, UPDATE_DT
						, NM_ITM
					)
					VALUES (
					TO_DATE(SOURCE.START_DATE,'YYYYMMDD')
						, SOURCE.STORE_ID
						, SOURCE.ITEM
						, SOURCE.NEW_PRICE
						, SOURCE.CURRENCY
						, SOURCE.TAXABLE_IND
						, SOURCE.VAT_CODE
						, TO_DATE(SOURCE.START_DATE,'YYYYMMDD')
						, SOURCE.DESCRIPTION
					);
				EXCEPTION
					WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					--- CHECK
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET      STG_STATUS = 1
						 ,STG_ERROR_MESSAGE = STG_ERROR_MESSAGE  || '|' || ' ERROR MERGING TABLE <AS_ITM_RTL_STR> - ' || ERROR_CODE
						 , STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
				END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
					UPDATE ARM_ITM_HIST
					SET EXPIRATION_DT=TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
					WHERE ID_ITM = ITEM_REC.ITEM(I)
						 AND ID_STR_RT = ITEM_REC.STORE_ID(I)
						 AND EXPIRATION_DT IS NULL;
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET STG_STATUS = 1
							 , STG_ERROR_MESSAGE = STG_ERROR_MESSAGE  || '|' ||' ERROR WHILE UPDATING TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
							 , STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
				END;

			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
				INSERT INTO ARM_ITM_HIST
				(
							ID_ITM
						, ID_STR_RT
						, EFFECTIVE_DT
						, KEY
						, VALUE
				)
				SELECT ITEM, STORE_ID, START_DATE, KEY, VALUE FROM
				(
					SELECT  ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
					TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
					'RETAIL_PRICE' KEY, ARM_UTIL_PKG.CONVERT_TO_CURRENCY(ITEM_REC.NEW_PRICE(I),ITEM_REC.CURRENCY(I), '0') VALUE FROM DUAL
					UNION ALL
					SELECT ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
					TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
					'TAXABLE' KEY, ITEM_REC.TAXABLE_IND(I) VALUE FROM DUAL
					UNION ALL
					SELECT ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
					TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
					'VAT_RATE' KEY, TO_CHAR(ITEM_REC.VAT_RATE(I)) VALUE FROM DUAL
					UNION ALL
					SELECT ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
					TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
					'MANUAL_PRICE_ENTRY' KEY, ITEM_REC.MANUAL_PRICE_ENTRY(I) VALUE FROM DUAL
					UNION ALL
					SELECT ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
					TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
					'STATUS' KEY, ITEM_REC.STATUS(I) VALUE FROM DUAL
				);
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET      STG_STATUS = 1
						, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR INSERTING TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
						, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
				WHEN OTHERS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						MSG:=SUBSTR(SQLERRM(ERROR_CODE),1,100);
						UPDATE ARM_STG_ITEM
						SET  STG_STATUS = 1
								, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE  || '|' || ' UNABLE TO INSERT ROW IN TABLE ARM_ITM_HIST - ' ||MSG
								 , STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
		BEGIN
			FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
				UPDATE ARM_STG_ITEM
				SET STG_PROCESS_DATE=SYSDATE,
				STG_STATUS=0
				WHERE STG_EVENT_ID=ITEM_REC.STG_EVENT_ID(I)
				AND STG_STATUS NOT IN (1);
		END;
		RETURN RETURN_CODE;
	END PROCESS_TRAN_0;

	FUNCTION PROCESS_TRAN_1(ITEM_REC ITEM_REC_TYPE)
	RETURN INTEGER
	IS
		L_CNT  		  PLS_INTEGER := 0;
		ERROR_MSG 	  VARCHAR2(1000) := NULL;
		ERROR_INDEX   PLS_INTEGER := 0;
		ERROR_CODE 	  VARCHAR2(10) := NULL;
		MSG VARCHAR2(100);
		LORENZO VARCHAR2(200);
		RETURN_CODE   PLS_INTEGER := 0;
		BEGIN
			BEGIN
				FORALL I IN 1 .. ITEM_REC.ITEM.COUNT SAVE EXCEPTIONS
				INSERT INTO AS_ITM (
				ID_ITM, ID_PRT_ITM, BARCODE, NM_ITM, ID_DPT_POS,
				ID_CLSS, ID_SBCL, FY, LU_SN, ID_BRN, LABEL, SUBLINE, GENDER, CATEGORY,
				ITEM_DROP, VARIANT, ID_SIZE, SIZE_INDEX, ID_KIDS_SIZE, ID_SPR, MODEL, FABRIC,
				ID_COLOR, PRODUCT_NUM, STYLE_NUM,
				ID_SEASON       -- LORENZO
				)
				VALUES (
					 ITEM_REC.ITEM(I), ITEM_REC.REF_ITEM(I), ITEM_REC.BARCODE(I),
				 ITEM_REC.DESCRIPTION(I),
				 ITEM_REC.DEPT(I), ITEM_REC.CLASS(I), ITEM_REC.SUB_CLASS(I),
				 ITEM_REC.YEAR(I), ITEM_REC.SEASON(I),
				 ITEM_REC.BRAND(I), ITEM_REC.LABEL(I), ITEM_REC.SUBLINE(I),
				 ITEM_REC.GENDER(I), ITEM_REC.CATEGORY(I),
				 ITEM_REC.ITEM_DROP(I), ITEM_REC.VARIANT(I), ITEM_REC.SIZE_ID(I),
				 ITEM_REC.SIZE_INDEX(I), ITEM_REC.SIZE_INDEX_1(I),
				 ITEM_REC.SUPPLIER(I), ITEM_REC.MODEL(I), ITEM_REC.FABRIC(I),
				 ITEM_REC.COLOR(I), ITEM_REC.PRODUCT(I),
				 ITEM_REC.STYLE_NUM(I),
				 ITEM_REC.SEASON(I)
				);
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						--LORENZO := SUBSTR(SQL%BULK_EXCEPTIONS(I).SQLERRM,1,150);
						IF (ERROR_CODE <> 1) THEN
							UPDATE ARM_STG_ITEM
							SET   STG_STATUS = 1
									, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE  || '|' || '  ERROR INSERTING	AS_ITM - ' || ERROR_CODE
									, STG_PROCESS_DATE = SYSDATE
							WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
						END IF;
					END LOOP;
			END;
			BEGIN
			FORALL I IN 1 .. ITEM_REC.ITEM.COUNT SAVE EXCEPTIONS
				 INSERT INTO AS_ITM_RTL_STR
					(
								DC_PRC_EF_PRN_RT
							, ID_STR_RT
							, ID_ITM
							, CURRENCY_CODE
							, LU_EXM_TX
							, SC_ITM_SLS
							, UPDATE_DT
							, NM_ITM
					)
					VALUES
					(
							 TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
						 , ITEM_REC.STORE_ID(I)
						 , ITEM_REC.ITEM(I)
						 , ITEM_REC.CURRENCY(I)
						 , ITEM_REC.TAXABLE_IND(I)
						 , ITEM_REC.STATUS(I)
						 , TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
						 , ITEM_REC.DESCRIPTION(I)
					);
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET STG_STATUS = 1
							 , STG_ERROR_MESSAGE = STG_ERROR_MESSAGE  || '|' || ' ERROR INSERTING TABLE <AS_ITM_RTL_STR> - ' || ERROR_CODE
							 , STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
		BEGIN
			FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
				DELETE  ARM_ITM_HIST
				WHERE ID_ITM = ITEM_REC.ITEM(I)
					 AND ID_STR_RT = ITEM_REC.STORE_ID(I)
					 AND EXPIRATION_DT IS NULL;
			EXCEPTION
				WHEN DML_ERRORS THEN
				ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
				L_CNT := L_CNT + ERRORS;
				RETURN_CODE := 1;
				FOR I IN 1..ERRORS LOOP
					ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
					ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
					UPDATE ARM_STG_ITEM
					SET STG_STATUS = 1
						 , STG_ERROR_MESSAGE = STG_ERROR_MESSAGE  || '|' ||' ERROR WHILE UPDATING TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
						 , STG_PROCESS_DATE = SYSDATE
					WHERE STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
				END LOOP;
		END;
		BEGIN
			FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
				INSERT INTO ARM_ITM_HIST
				(
									ID_ITM
								, ID_STR_RT
								, EFFECTIVE_DT
								, KEY
								, VALUE
				)
			SELECT ITEM, STORE_ID, START_DATE, KEY, VALUE FROM
			(
				SELECT  ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
								TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
								'RETAIL_PRICE' KEY, ITEM_REC.CURRENCY(I) ||	TO_CHAR(ITEM_REC.NEW_PRICE(I)) VALUE FROM DUAL
				UNION ALL
				SELECT ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
							 TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
							'TAXABLE' KEY, ITEM_REC.TAXABLE_IND(I) VALUE FROM DUAL
				UNION ALL
				SELECT ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
							 TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
							'VAT_RATE' KEY, TO_CHAR(ITEM_REC.VAT_RATE(I)) VALUE FROM DUAL
				UNION ALL
				SELECT ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
							 TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
							'MANUAL_PRICE_ENTRY' KEY, ITEM_REC.MANUAL_PRICE_ENTRY(I) VALUE FROM	DUAL
				UNION ALL
				SELECT ITEM_REC.ITEM(I) ITEM, ITEM_REC.STORE_ID(I) STORE_ID,
							TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD') START_DATE,
							'STATUS' KEY, ITEM_REC.STATUS(I) VALUE FROM DUAL
			 );
		EXCEPTION
			WHEN DML_ERRORS THEN
				ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
				L_CNT := L_CNT + ERRORS;
				RETURN_CODE := 1;
				FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET  STG_STATUS = 1
							 , STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR	INSERTING TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
							 , STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
				END LOOP;
				WHEN OTHERS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						MSG:=SUBSTR(SQLERRM(ERROR_CODE),1,100);
						UPDATE ARM_STG_ITEM
						SET STG_STATUS = 1
								, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE  || '|' || ' ERROR INSERTING TABLE ARM_ITM_HIST - ' ||MSG
								, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
		END;
		BEGIN
			FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
			SAVE EXCEPTIONS
					INSERT INTO RK_PRM_ITM
					(
							ID_ITM
						, ID_STR_RT
						, CURRENCY_CODE
						, ID_RU_PRDV
						, DC_PRM_EP
					)
					SELECT
						 ITEM_REC.ITEM(I)
						, ITEM_REC.STORE_ID(I)
						, ITEM_REC.CURRENCY(I)
						, ID_RU_PRDV
						, TO_DATE(ITEM_REC.END_DATE(I)||ITEM_REC.END_TIME(I),'YYYYMMDDHH24MISS')
					FROM   RU_PRM_PRDV     RULES_TABLE
							 , AS_ITM          ITEMS_TABLE
							 , AS_ITM_RTL_STR  STORES_TABLE
					WHERE RULES_TABLE.ID_STR_RT = ITEM_REC.STORE_ID(I)
					AND   RULES_TABLE.ID_PRM = ITEM_REC.PROMOTION_NUM(I)
					AND 	ITEMS_TABLE.ID_ITM=STORES_TABLE.ID_ITM
					AND   STORES_TABLE.ID_STR_RT = RULES_TABLE.ID_STR_RT
					AND	((STORES_TABLE.ID_ITM=ITEM_REC.ITEM(I) AND ITEM_REC.ITEM(I) IS NOT NULL)
					 OR (ITEMS_TABLE.ID_DPT_POS = NVL(TO_CHAR(ITEM_REC.DEPT(I)), ITEMS_TABLE.ID_DPT_POS)
					AND   ITEMS_TABLE.ID_CLSS =	NVL(TO_CHAR(ITEM_REC.CLASS(I)), ITEMS_TABLE.ID_CLSS)
					AND   ITEMS_TABLE.ID_SBCL =	NVL(TO_CHAR(ITEM_REC.SUB_CLASS(I)), ITEMS_TABLE.ID_SBCL)
					AND 	ITEM_REC.ITEM(I) IS NULL))
					AND ITEM_REC.PROMOTION_NUM(I) IS NOT NULL;
					-- EXCEPTION SECTION
		EXCEPTION
			WHEN DML_ERRORS THEN
				RETURN_CODE := 1;
				FOR J IN 1..SQL%BULK_EXCEPTIONS.COUNT
				LOOP
					ERROR_INDEX := SQL%BULK_EXCEPTIONS(J).ERROR_INDEX;
					ERROR_CODE := SQL%BULK_EXCEPTIONS(J).ERROR_CODE;
					UPDATE ARM_STG_ITEM
						SET STG_STATUS = 1
								, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || ' ERROR INSERTING RK_PRM_ITM - ' || ERROR_CODE
								, STG_PROCESS_DATE = SYSDATE
					WHERE  STG_EVENT_ID =	ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
				END LOOP;
		END;

		BEGIN
			FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
			UPDATE ARM_STG_ITEM
			SET STG_PROCESS_DATE=SYSDATE,
					STG_STATUS=0
			WHERE STG_EVENT_ID=ITEM_REC.STG_EVENT_ID(I)
						AND STG_STATUS NOT IN (1);
		END;
		RETURN RETURN_CODE;
	END PROCESS_TRAN_1;
	FUNCTION PROCESS_TRAN_2(ITEM_REC ITEM_REC_TYPE)
	RETURN INTEGER
	IS
		L_CNT  		  PLS_INTEGER := 0;
		ERROR_MSG 	  VARCHAR2(1000) := NULL;
		ERROR_INDEX   PLS_INTEGER := 0;
		ERROR_CODE 	  VARCHAR2(10) := NULL;
		MSG VARCHAR2(100);
		RETURN_CODE   PLS_INTEGER := 0;
		BEGIN
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
				SAVE EXCEPTIONS
					UPDATE ARM_ITM_HIST
					SET    EXPIRATION_DT = TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
					WHERE ID_ITM = ITEM_REC.ITEM(I)
						AND   ID_STR_RT = ITEM_REC.STORE_ID(I)
						AND   KEY = 'RETAIL_PRICE'
						AND   EXPIRATION_DT IS NULL;
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET      STG_STATUS = 1
						, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR UPDATING	TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
						, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
				SAVE EXCEPTIONS
					INSERT INTO ARM_ITM_HIST
					(
						ID_ITM, ID_STR_RT, EFFECTIVE_DT, KEY, VALUE
					)
					SELECT ITEM_REC.ITEM(I), ITEM_REC.STORE_ID(I),
									TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD'),
									'RETAIL_PRICE', ITEM_REC.CURRENCY(I) ||
									TO_CHAR(ITEM_REC.NEW_PRICE(I)) FROM ARM_ITM_HIST
									WHERE ARM_ITM_HIST.ID_ITM = ITEM_REC.ITEM(I) AND
									ARM_ITM_HIST.ID_STR_RT = ITEM_REC.STORE_ID(I)
									AND ARM_ITM_HIST.KEY = 'RETAIL_PRICE' AND ARM_ITM_HIST.EXPIRATION_DT
									IS NULL HAVING COUNT(*)=0;
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET      STG_STATUS = 1
						, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR INSERTING TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
						, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;

			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
					UPDATE AS_ITM_RTL_STR
					SET UPDATE_DT = TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
					WHERE ID_ITM = ITEM_REC.ITEM(I)
					AND ID_STR_RT = ITEM_REC.STORE_ID(I);
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET   STG_STATUS = 1
								, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR UPDATING	TABLE <AS_ITM_RTL_STR> - ' || ERROR_CODE
								, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
					UPDATE ARM_STG_ITEM
					SET STG_PROCESS_DATE=SYSDATE,
							STG_STATUS=0
					WHERE STG_EVENT_ID=ITEM_REC.STG_EVENT_ID(I)
								AND STG_STATUS NOT IN (1);
			END;
		RETURN RETURN_CODE;
	END PROCESS_TRAN_2;
	FUNCTION PROCESS_TRAN_3_4_5(ITEM_REC ITEM_REC_TYPE)
	RETURN INTEGER
	IS
		L_CNT  		  PLS_INTEGER := 0;
		ERROR_MSG 	  VARCHAR2(1000) := NULL;
		ERROR_INDEX   PLS_INTEGER := 0;
		ERROR_CODE 	  VARCHAR2(10) := NULL;
		MSG VARCHAR2(100);
		RETURN_CODE   PLS_INTEGER := 0;
		BEGIN
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
				UPDATE ARM_ITM_HIST
				SET    EXPIRATION_DT = TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
				WHERE ID_ITM = ITEM_REC.ITEM(I)
					AND   ID_STR_RT = ITEM_REC.STORE_ID(I)
					AND   KEY = 'MARKDOWN'
					AND   EXPIRATION_DT IS NULL;
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET STG_STATUS = 1
						, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR UPDATING	TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
						, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
				SAVE EXCEPTIONS
					INSERT INTO ARM_ITM_HIST
					(ID_ITM, ID_STR_RT, EFFECTIVE_DT, KEY, VALUE)
					SELECT ITEM_REC.ITEM(I), ITEM_REC.STORE_ID(I),
								TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD'),
							'MARKDOWN', ITEM_REC.CURRENCY(I)||DECODE(ITEM_REC.TRAN_TYPE(I), 3, ITEM_REC.OLD_PRICE(I) - ITEM_REC.NEW_PRICE(I), 4, ITEM_REC.OLD_PRICE(I) - ITEM_REC.NEW_PRICE(I), 5, 0)  
					FROM
					ARM_ITM_HIST
					WHERE ARM_ITM_HIST.ID_ITM = ITEM_REC.ITEM(I) AND
								ARM_ITM_HIST.ID_STR_RT = ITEM_REC.STORE_ID(I)
								AND ARM_ITM_HIST.KEY = 'MARKDOWN' AND ARM_ITM_HIST.EXPIRATION_DT IS NULL HAVING COUNT(*)=0;
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET STG_STATUS = 1
							, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR INSERTING TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
							, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
				UPDATE AS_ITM_RTL_STR
				SET UPDATE_DT = TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
				WHERE ID_ITM = ITEM_REC.ITEM(I)
				AND ID_STR_RT = ITEM_REC.STORE_ID(I);
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET  STG_STATUS = 1
							, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR UPDATING	TABLE <AS_ITM_RTL_STR> - ' || ERROR_CODE
							, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
				UPDATE ARM_STG_ITEM
				SET STG_PROCESS_DATE=SYSDATE,
						STG_STATUS=0
				WHERE STG_EVENT_ID=ITEM_REC.STG_EVENT_ID(I)
						AND STG_STATUS NOT IN (1);
			END;
		RETURN RETURN_CODE;
	END PROCESS_TRAN_3_4_5;

	FUNCTION PROCESS_TRAN_6_7_9(ITEM_REC ITEM_REC_TYPE, TRAN_TYPE VARCHAR2)
	RETURN INTEGER
	IS
		L_CNT  		  PLS_INTEGER := 0;
		ERROR_MSG 	  VARCHAR2(1000) := NULL;
		ERROR_INDEX   PLS_INTEGER := 0;
		ERROR_CODE 	  VARCHAR2(10) := NULL;
		MSG VARCHAR2(100);
		RETURN_CODE   PLS_INTEGER := 0;
		L_ITEM_KEY	  VARCHAR2(20) := NULL;
		BEGIN
			SELECT DECODE(TRAN_TYPE, 6, 'VAT_RATE', 7,'TAXABLE', 9,'STATUS') INTO
			L_ITEM_KEY FROM DUAL;
			BEGIN
				FORALL I IN 1..ITEM_REC.ITEM.COUNT SAVE EXCEPTIONS
					UPDATE ARM_ITM_HIST
					SET    EXPIRATION_DT =
					TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
					WHERE ID_ITM = ITEM_REC.ITEM(I)
					AND   ID_STR_RT = ITEM_REC.STORE_ID(I)
					AND   KEY = L_ITEM_KEY
					AND   EXPIRATION_DT IS NULL;
				EXCEPTION
					WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET   STG_STATUS = 1
								, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR UPDATING	TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
								, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
				SAVE EXCEPTIONS
					INSERT INTO ARM_ITM_HIST
					(ID_ITM, ID_STR_RT, EFFECTIVE_DT, KEY, VALUE)
					SELECT ITEM_REC.ITEM(I), ITEM_REC.STORE_ID(I),
					TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD'),
					L_ITEM_KEY, DECODE(TRAN_TYPE, 6, TO_CHAR(ITEM_REC.VAT_RATE(I)),	7,TO_CHAR(ITEM_REC.TAXABLE_IND(I)), 9, TO_CHAR(ITEM_REC.STATUS(I)))
					FROM ARM_ITM_HIST
					WHERE ARM_ITM_HIST.ID_ITM = ITEM_REC.ITEM(I) AND
								ARM_ITM_HIST.ID_STR_RT = ITEM_REC.STORE_ID(I)
								AND ARM_ITM_HIST.KEY = L_ITEM_KEY AND ARM_ITM_HIST.EXPIRATION_DT IS	NULL HAVING COUNT(*)=0;
			EXCEPTION
				WHEN DML_ERRORS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET   STG_STATUS = 1
								, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR INSERTING TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
								, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
				WHEN OTHERS THEN
					ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
					L_CNT := L_CNT + ERRORS;
					RETURN_CODE := 1;
					FOR I IN 1..ERRORS LOOP
						ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
						ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
						UPDATE ARM_STG_ITEM
						SET   STG_STATUS = 1
								, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR INSERTING TABLE <ARM_ITM_HIST> - ' || ERROR_CODE
								, STG_PROCESS_DATE = SYSDATE
						WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
					END LOOP;
			END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
					UPDATE AS_ITM_RTL_STR
					SET UPDATE_DT = TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
					WHERE ID_ITM = ITEM_REC.ITEM(I)
								AND ID_STR_RT = ITEM_REC.STORE_ID(I);
				EXCEPTION
					WHEN DML_ERRORS THEN
						ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
						L_CNT := L_CNT + ERRORS;
						RETURN_CODE := 1;
						FOR I IN 1..ERRORS LOOP
							ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
							ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
							UPDATE ARM_STG_ITEM
							SET STG_STATUS = 1
									, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR UPDATING	TABLE <AS_ITM_RTL_STR> - ' || ERROR_CODE
									, STG_PROCESS_DATE = SYSDATE
							WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
						END LOOP;
			END;
			BEGIN
				FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
					UPDATE ARM_STG_ITEM
					SET STG_PROCESS_DATE=SYSDATE,
							STG_STATUS=0
					WHERE STG_EVENT_ID=ITEM_REC.STG_EVENT_ID(I)
								AND STG_STATUS NOT IN (1);
			END;
		RETURN RETURN_CODE;
	END PROCESS_TRAN_6_7_9;

	FUNCTION PROCESS_TRAN_8(ITEM_REC ITEM_REC_TYPE)
	RETURN INTEGER
	IS
		L_CNT  		  NUMBER := 0;
		ERROR_MSG 	  VARCHAR2(1000) := NULL;
		ERROR_INDEX   NUMBER := 0;
		ERROR_CODE 	  VARCHAR2(10) := NULL;
		MSG VARCHAR2(100);
		RETURN_CODE   NUMBER := 0;
		L_ITEM_KEY	  VARCHAR2(20) := NULL;
	BEGIN
		BEGIN
			FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
			SAVE EXCEPTIONS
				INSERT INTO RK_PRM_ITM
				(
					ID_ITM
					, ID_STR_RT
					, CURRENCY_CODE
					, ID_RU_PRDV
					, DC_PRM_EP
				)
				SELECT
					ITEM_REC.ITEM(I)
					, ITEM_REC.STORE_ID(I)
					, ITEM_REC.CURRENCY(I)
					, RULES_TABLE.ID_RU_PRDV
					, TO_DATE(ITEM_REC.END_DATE(I)||ITEM_REC.END_TIME(I),'YYYYMMDDHH24MISS')
					FROM   RU_PRM_PRDV     RULES_TABLE
							, AS_ITM          ITEMS_TABLE
							, AS_ITM_RTL_STR  STORES_TABLE
				WHERE RULES_TABLE.ID_STR_RT = ITEM_REC.STORE_ID(I)
						AND   RULES_TABLE.ID_PRM = ITEM_REC.PROMOTION_NUM(I)
						AND 	ITEMS_TABLE.ID_ITM=STORES_TABLE.ID_ITM
						AND   STORES_TABLE.ID_STR_RT = RULES_TABLE.ID_STR_RT
						AND	((STORES_TABLE.ID_ITM=ITEM_REC.ITEM(I) AND ITEM_REC.ITEM(I) IS NOT NULL)
						OR (ITEMS_TABLE.ID_DPT_POS = NVL(TO_CHAR(ITEM_REC.DEPT(I)), ITEMS_TABLE.ID_DPT_POS)
						AND   ITEMS_TABLE.ID_CLSS =	NVL(TO_CHAR(ITEM_REC.CLASS(I)), ITEMS_TABLE.ID_CLSS)
						AND   ITEMS_TABLE.ID_SBCL =	NVL(TO_CHAR(ITEM_REC.SUB_CLASS(I)), ITEMS_TABLE.ID_SBCL)
						AND 	ITEM_REC.ITEM(I) IS NULL))
						AND ITEM_REC.PROMOTION_NUM(I) IS NOT NULL;
				-- EXCEPTION SECTION
		EXCEPTION
			WHEN DML_ERRORS THEN
				RETURN_CODE := 1;
				FOR J IN 1..SQL%BULK_EXCEPTIONS.COUNT
				LOOP
					ERROR_INDEX := SQL%BULK_EXCEPTIONS(J).ERROR_INDEX;
					ERROR_CODE := SQL%BULK_EXCEPTIONS(J).ERROR_CODE;
					UPDATE ARM_STG_ITEM
					SET STG_STATUS = 1
						, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || ' ERROR INSERTING RK_PRM_ITM - ' || ERROR_CODE
						, STG_PROCESS_DATE = SYSDATE
					WHERE  STG_EVENT_ID =	ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
				END LOOP;
			WHEN OTHERS THEN
				RETURN_CODE := 1;
				FOR J IN 1..SQL%BULK_EXCEPTIONS.COUNT
				LOOP
					ERROR_INDEX := SQL%BULK_EXCEPTIONS(J).ERROR_INDEX;
					ERROR_CODE := SQL%BULK_EXCEPTIONS(J).ERROR_CODE;
					UPDATE ARM_STG_ITEM
					SET STG_STATUS = 1
						, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || ' ERROR INSERTING RK_PRM_ITM - ' || ERROR_CODE
						, STG_PROCESS_DATE = SYSDATE
					WHERE  STG_EVENT_ID =	ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
				END LOOP;
		END;

		BEGIN
			FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT SAVE EXCEPTIONS
				UPDATE AS_ITM_RTL_STR
				SET UPDATE_DT = TO_DATE(ITEM_REC.START_DATE(I),'YYYYMMDD')
				WHERE ID_ITM = ITEM_REC.ITEM(I)
				AND ID_STR_RT = ITEM_REC.STORE_ID(I);
		EXCEPTION
			WHEN DML_ERRORS THEN
				ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
				L_CNT := L_CNT + ERRORS;
				RETURN_CODE := 1;
				FOR I IN 1..ERRORS LOOP
					ERROR_INDEX := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
					ERROR_CODE := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
					UPDATE ARM_STG_ITEM
					SET STG_STATUS = 1
						, STG_ERROR_MESSAGE = STG_ERROR_MESSAGE || '|' ||' ERROR UPDATING	TABLE <AS_ITM_RTL_STR> - ' || ERROR_CODE
						, STG_PROCESS_DATE = SYSDATE
					WHERE  STG_EVENT_ID = ITEM_REC.STG_EVENT_ID(ERROR_INDEX);
				END LOOP;
		END;

		BEGIN
			FORALL I IN 1..ITEM_REC.TRAN_TYPE.COUNT
				UPDATE ARM_STG_ITEM
				SET STG_PROCESS_DATE=SYSDATE,
				STG_STATUS=0
				WHERE STG_EVENT_ID=ITEM_REC.STG_EVENT_ID(I)
				AND STG_STATUS NOT IN (1);
		END;

		RETURN RETURN_CODE;
	END PROCESS_TRAN_8;
	FUNCTION process_tran_10(item_rec item_rec_type)
			 RETURN INTEGER
	IS
		l_cnt  		  NUMBER := 0;
		error_msg 	  VARCHAR2(1000) := NULL;
		error_index   NUMBER := 0;
		error_code 	  VARCHAR2(10) := NULL;
		msg VARCHAR2(100);
		return_code   NUMBER := 0;
		l_item_key	  VARCHAR2(20) := NULL;
	BEGIN
	    DELETE FROM RK_PRM_ITM
		WHERE DC_PRM_EP < SYSDATE;
		 BEGIN
	          FORALL i IN 1..item_rec.tran_type.COUNT
	          SAVE EXCEPTIONS
	              UPDATE RK_PRM_ITM
				  SET dc_prm_ep=TO_DATE(item_rec.end_date(i)||item_rec.end_time(i),'YYYYMMDDHH24MISS')
				  WHERE (id_itm,id_str_rt,CURRENCY_CODE,id_ru_prdv) IN (SELECT
	                   item_rec.item(i)
	                 , item_rec.store_id(i)
	                 , item_rec.currency(i)
	                 , rules_table.id_ru_prdv
	              FROM   RU_PRM_PRDV     rules_table
	                   , AS_ITM          items_table
	                   , AS_ITM_RTL_STR  stores_table
	              WHERE rules_table.id_str_rt = item_rec.store_id(i)
	              AND   rules_table.id_prm = item_rec.promotion_num(i)
				  AND 	items_table.ID_ITM=stores_table.ID_ITM
	              AND   stores_table.id_str_rt = rules_table.id_str_rt
				  AND	((stores_table.id_itm=item_rec.item(i) AND item_rec.item(i) IS NOT NULL)
				  		   OR (items_table.id_dpt_pos = NVL(TO_CHAR(item_rec.dept(i)),items_table.id_dpt_pos)
					              AND   items_table.id_clss = NVL(TO_CHAR(item_rec.CLASS(i)), items_table.id_clss)
					              AND   items_table.id_sbcl = NVL(TO_CHAR(item_rec.sub_class(i)), items_table.id_sbcl)
								  AND 	item_rec.item(i) IS NULL))
				  AND item_rec.promotion_num(i) IS NOT NULL);
	              -- Exception section
	       EXCEPTION
	            WHEN dml_errors THEN
					return_code := 1;
	                FOR j IN 1..SQL%bulk_exceptions.COUNT
	                LOOP
	                    error_index := SQL%BULK_EXCEPTIONS(j).ERROR_INDEX;
	                    error_code := SQL%BULK_EXCEPTIONS(j).ERROR_CODE;
	                    UPDATE arm_stg_item
	                    SET     stg_status = 1
	                           , stg_error_message = stg_error_message || 'Error UPDATING RK_PRM_ITM - ' || error_code
						 	   , stg_process_date = SYSDATE
	                    WHERE  stg_event_id = item_rec.stg_event_id(error_index);
					END LOOP;
	            WHEN OTHERS THEN
					return_code := 1;
	                FOR j IN 1..SQL%bulk_exceptions.COUNT
	                LOOP
	                    error_index := SQL%BULK_EXCEPTIONS(j).ERROR_INDEX;
	                    error_code := SQL%BULK_EXCEPTIONS(j).ERROR_CODE;
	                    UPDATE arm_stg_item
	                    SET     stg_status = 1
	                           , stg_error_message = stg_error_message || 'Error UPDATING RK_PRM_ITM - ' || error_code
						 	   , stg_process_date = SYSDATE
	                    WHERE  stg_event_id = item_rec.stg_event_id(error_index);
					END LOOP;
	     END;
	
		 BEGIN
	          FORALL i IN 1..item_rec.tran_type.COUNT SAVE EXCEPTIONS
	                  UPDATE AS_ITM_RTL_STR
	                  SET UPDATE_DT = TO_DATE(item_rec.start_date(i),'YYYYMMDD')
	                  WHERE id_itm = item_rec.item(i)
					  AND id_str_rt = item_rec.store_id(i);
	     EXCEPTION
		      WHEN dml_errors THEN
				errors := SQL%BULK_EXCEPTIONS.COUNT;
				l_cnt := l_cnt + errors;
				return_code := 1;
				FOR i IN 1..errors LOOP
				      error_index := SQL%BULK_EXCEPTIONS(i).ERROR_INDEX;
				      error_code := SQL%BULK_EXCEPTIONS(i).ERROR_CODE;
				      UPDATE arm_stg_item
				      SET      stg_status = 1
					    	 , stg_error_message = stg_error_message || '|' ||' Error UPDATING
						TABLE <AS_ITM_RTL_STR> - ' || error_code
							 , stg_process_date = SYSDATE
				      WHERE  stg_event_id = item_rec.stg_event_id(error_index);
				END LOOP;
	     END;
	
		 BEGIN
	          FORALL i IN 1..item_rec.tran_type.COUNT
			  		 UPDATE ARM_STG_ITEM
					 SET STG_PROCESS_DATE=SYSDATE,
					 STG_STATUS=0
					 WHERE STG_EVENT_ID=item_rec.stg_event_id(i)
					 AND STG_STATUS NOT IN (1);
		 END;
	
		 RETURN return_code;
	END process_tran_10;
	FUNCTION process_tran_11(item_rec item_rec_type)
			 RETURN INTEGER
	IS
		l_cnt  		  NUMBER := 0;
		error_msg 	  VARCHAR2(1000) := NULL;
		error_index   NUMBER := 0;
		error_code 	  VARCHAR2(10) := NULL;
		msg VARCHAR2(100);
		return_code   NUMBER := 0;
		l_item_key	  VARCHAR2(20) := NULL;
	BEGIN
		 BEGIN
	          FORALL i IN 1..item_rec.tran_type.COUNT SAVE EXCEPTIONS
			  		UPDATE AS_ITM
					SET BARCODE=item_rec.BARCODE(i)
					WHERE ID_ITM=item_rec.ITEM(i);
	              -- Exception section
	       EXCEPTION
	            WHEN dml_errors THEN
					return_code := 1;
	                FOR j IN 1..SQL%bulk_exceptions.COUNT
	                LOOP
	                    error_index := SQL%BULK_EXCEPTIONS(j).ERROR_INDEX;
	                    error_code := SQL%BULK_EXCEPTIONS(j).ERROR_CODE;
	                    UPDATE arm_stg_item
	                    SET     stg_status = 1
	                           , stg_error_message = stg_error_message || 'Error UPDATING AS_ITM - ' || error_code
						 	   , stg_process_date = SYSDATE
	                    WHERE  stg_event_id = item_rec.stg_event_id(error_index);
					END LOOP;
	            WHEN OTHERS THEN
					return_code := 1;
	                FOR j IN 1..SQL%bulk_exceptions.COUNT
	                LOOP
	                    error_index := SQL%BULK_EXCEPTIONS(j).ERROR_INDEX;
	                    error_code := SQL%BULK_EXCEPTIONS(j).ERROR_CODE;
	                    UPDATE arm_stg_item
	                    SET     stg_status = 1
	                           , stg_error_message = stg_error_message || 'Error UPDATING AS_ITM - ' || error_code
						 	   , stg_process_date = SYSDATE
	                    WHERE  stg_event_id = item_rec.stg_event_id(error_index);
					END LOOP;
	     END;
	
		 BEGIN
	          FORALL i IN 1..item_rec.tran_type.COUNT SAVE EXCEPTIONS
	                  UPDATE AS_ITM_RTL_STR
	                  SET UPDATE_DT = SYSDATE
	                  WHERE id_itm = item_rec.item(i);
	     EXCEPTION
		      WHEN dml_errors THEN
				errors := SQL%BULK_EXCEPTIONS.COUNT;
				l_cnt := l_cnt + errors;
				return_code := 1;
				FOR i IN 1..errors LOOP
				      error_index := SQL%BULK_EXCEPTIONS(i).ERROR_INDEX;
				      error_code := SQL%BULK_EXCEPTIONS(i).ERROR_CODE;
				      UPDATE arm_stg_item
				      SET      stg_status = 1
					    	 , stg_error_message = stg_error_message || '|' ||' Error UPDATING TABLE <AS_ITM_RTL_STR> - ' || error_code
							 , stg_process_date = SYSDATE
				      WHERE  stg_event_id = item_rec.stg_event_id(error_index);
				END LOOP;
	     END;
		 BEGIN
	          FORALL i IN 1..item_rec.tran_type.COUNT
			  		 UPDATE ARM_STG_ITEM
					 SET STG_PROCESS_DATE=SYSDATE,
					 STG_STATUS=0
					 WHERE STG_EVENT_ID=item_rec.stg_event_id(i)
					 AND STG_STATUS NOT IN (1);
		 END;
	
		 RETURN return_code;
	END process_tran_11;

END ARM_LOAD_ITEM_PKG;
/
